# Install Receptor on CentOS 8
---
- hosts: all
  become: yes
  tasks:

    # Copy default SSH key-pair to VM
    - name: Create ssh config dir
      ansible.builtin.file:
        path: /home/vagrant/.ssh
        state: directory
        recurse: yes
        owner: 1000
        group: 1000
    - name: Copy default SSH key-pair (~/.ssh/id_rsa)
      ansible.builtin.copy:
        src: ~/.ssh/id_rsa
        dest: /home/vagrant/.ssh/id_rsa
        owner: 1000
        group: 1000
        mode: '0600'
    - name: Copy default SSH key-pair (~/.ssh/id_rsa.pub)
      ansible.builtin.copy:
        src: ~/.ssh/id_rsa.pub
        dest: /home/vagrant/.ssh/id_rsa.pub
        owner: 1000
        group: 1000
        mode: '0600'

    # TODO add zsh
    # TODO add https://github.com/junegunn/fzf

    # Env vars
    - name: Create a directory '/etc/profile.d' if it does not exist
      ansible.builtin.file:
        path: /etc/profile.d
        state: directory
        mode: '0755'
    - name: Touch a file, '/etc/profile.d/local.sh' 
      ansible.builtin.file:
        path: /etc/profile.d/local.sh
        state: touch
        mode: u=rw,g=r,o=r
    - name: Ensure '/usr/local/bin/' is in the PATH var
      ansible.builtin.lineinfile:
        path: /etc/profile.d/local.sh
        line: "export PATH=$PATH:/usr/local/bin/"

    # Dependencies
    - name: Ensure the following packages are installed.
      dnf: name="{{ item }}" state=latest
      loop:
        - epel-release
        - git
        - python38-pip
        - python38-devel
        - python3-virtualenv
        - go
        - libpq-devel
        - make
        - automake
        - gcc
        - gcc-c++
        - kernel-devel
        - htop

    - name: Install the latest xmlsec1-devel from the powertools repo
      dnf:
        name: xmlsec1-devel
        enablerepo: powertools
        state: latest

    - name: Ensure the following packages are installed.
      yum: name="{{ item }}" state=latest
      loop:
        - "@Development Tools"

    # Install Python libs
    - name: Ensure latest Python pip is installed.
      pip:
        name: "{{ item }}"
        state: forcereinstall
        executable: /usr/local/bin/pip
      loop:
        - pip
        - pbr
        - pyOpenSSL
        - jinja2
        - wheel

    # Ansible
    - name: check ansible executable is present
      shell: "which ansible"
      register: result
      failed_when: result.rc != 0 and result.rc >= 2

    # pip module
    - name: Ensure ansible is installed.
      shell: "/usr/local/bin/pip install {{ item }}"
      loop:
        - ansible
        # - ansible-runner
      when: result.rc != 0

    # gcloud
    - name: Ensure 'google-cloud-sdk' repo config file exists
      copy:
        dest: "/etc/yum.repos.d/google-cloud-sdk.repo"
        content: |
          [google-cloud-sdk]
          name=Google Cloud SDK
          baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=0
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    - name: Ensure latest 'google-cloud-sdk packages' are installed.
      dnf: name="{{ item }}" state=latest
      loop:
        - google-cloud-sdk
        - kubectl

    # Podman (can't coexist with Docker)
    # - name: Ensure latest podman is installed.
    #   yum: name=podman state=latest

    # Docker (can't coexist with Podman)
    - name: Ensure latest yum-utils is installed.
      yum: name=yum-utils state=latest
    - name: Download docker repo config file
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: '0440'
    - name: Ensure latest docker is installed.
      yum: name="{{ item }}" state=latest
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
    - name: Make sure docker service is running
      ansible.builtin.systemd:
        state: started
        name: docker
    - name: Enable docker service and ensure it is not masked
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        masked: no
    - name: Adding vagrant user to group docker
      user:
        name: vagrant
        groups: docker
        append: yes

    # docker compose
    - name: Get latest 'docker-compose' release metadata
      uri:
        url: https://api.github.com/repos/docker/compose/releases
        return_content: yes
      register: _dockercompose_github_releases
      failed_when: "'-Linux' not in _dockercompose_github_releases.content"

    - name: Ensure latest 'docker-compose' release is installed
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: /usr/local/bin/docker-compose
        mode: 0755
      loop: "{{ _dockercompose_github_releases.json[0].assets}}"
      when:
        - "'-Linux' in item.name"
        - "'sha256' not in item.name"
      become: true
